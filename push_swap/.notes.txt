STEP 1
Install visualiser from https://github.com/o-reo/push_swap_visualizer, downolad 'checker' from 42 intranet

STEP 2
Create Makefile, header file, main.c

STEP 3 
You can use libft and ft_printf so add them to your project

STEP 4
Watch video: https://www.youtube.com/watch?v=OaG81sDEpVk and https://www.youtube.com/watch?v=wRvipSG4Mmk

STEP 4.1
Define a struct in your header file

STEP 5
Review linked lists from libft project!

STEP 6
Create functions for stack, create new stack, add new one at the end, lenght of stack, etc.

STEP 7
Create movements 

STEP 8
Choose one of the algorithms
Turk Algorith: https://medium.com/@ayogun/push-swap-c1f5d2d41e97
Best friend alogirth: https://github.com/duarte3333/Push_Swap


check if numbers are already sorted

STEP 9 - Turk Algorithm
1. Push the nodes from A to B until there are only three nodes left in A.
Each time a node is pushed to B, B is sorted in a descending order.
The first two nodes are pushed without checking anything. We now have
the two numbers in B - a current min and a current max.
2. Everytime you make the push, you check if there are 3 nodes in stack A
3. Every A needs a ´closest smaller nbr to A' from stack B. 
A has to have a larger number to B when we push it.
If A is smaller to B, then the 'closes smaller number to A' is the max_value in B.
Every A node is assigned a ´closest smallest number to A´



MAIN FUNCTION
Write the main function. Handle errors better, so is input correct?

ERROR HANDLING
Error handling if the input value is not an integer but a word
Error handling if the you don't receive enough arguemtns in the input

MOVEMENTS
Write a function for each of the 11 operations/movements
If you make use of one movement, make sure to print it.

STACKS
Should be linked lists

STRUCT
*prev (pointer to the previous node)
*next (point to the next node)
current position - current position occupied in the stack
value - an integer, for example 140 or 134567

Tester: https://github.com/LeoFu9487/push_swap_tester

// functions to handle errors and free the stack
// min, max nodes
