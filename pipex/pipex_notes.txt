PIPEX PROJECT INSTRUCTIONS: https://cdn.intra.42.fr/pdf/pdf/119143/en.subject.pdf

USEFUL RESOURCES:
- Medium article: https://csnotes.medium.com/pipex-tutorial-42-project-4469f5dd5901
- Technical explanation: https://github.com/jdecorte-be/42-Pipex/blob/master/README.md
- 2h video in Russian: https://www.youtube.com/watch?v=7e_gExniT_Y


CODING PROCESS:

NEW FUNCTIONS: dup, dup2, execve, fork, pipe, unlink, wait, waitpid

int dup(int oldfd); // returns a newfd which is the lowest-numbered unused file descriptor for the new descriptor
int dup2(int oldfd, int newfd); // returns a newfd which in the 2nd param

int execve(const char *pathname, char *const argv[], char *const envp[]);
const char *pathname = program
char *const argv[] = ponters to strings passes to the new program
char *const envp[] = strings passed as the environment of the new program

pid_t fork(void);
fork() creates a new process by duplicating the calling process. The new process is referred to as
the child process. The calling process is referred to as the parent process.
On success, the PID of the child process is returned in the parent, and 0 is returned in the child.
On failure, -1 is returned in the parent, no child process is created, and errno is  set  appropriately.

int pipe(int pipefd[2])
pipefd[0] refers to the read end of the pipe.  pipefd[1] refers to the write end of the pipe. 
On  success,  zero  is  returned.   On error, -1 is returned, errno is set appropriately, and
pipefd is left unchanged.

unlink - call the unlink function to remove the specified fil

pid_t wait(int *wstatus);
pid_t waitpid(pid_t pid, int *wstatus, int options);
The wait() system call suspends execution of the calling thread until one of its children terminates.  The  call  wait(&wsta‚Äê
tus) is equivalent to:
waitpid(-1, &wstatus, 0);
The waitpid() system call suspends execution of the calling thread until a child specified by pid argument has changed state.