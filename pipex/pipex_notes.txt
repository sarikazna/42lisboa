PIPEX PROJECT INSTRUCTIONS: https://cdn.intra.42.fr/pdf/pdf/119143/en.subject.pdf

USEFUL RESOURCES:
- Medium article: https://csnotes.medium.com/pipex-tutorial-42-project-4469f5dd5901
- 2h video in Russian (left off at 40min): https://www.youtube.com/watch?v=7e_gExniT_Y
- Creating and killing child processes: https://www.codequoi.com/en/creating-and-killing-child-processes-in-c/
- Pipe: https://www.codequoi.com/en/pipe-an-inter-process-communication-method/
- Error management: https://www.codequoi.com/en/errno-and-error-management-in-c/
- File descriptor: https://www.codequoi.com/en/handling-a-file-by-its-descriptor-in-c/
- Reactive article: https://reactive.so/post/42-a-comprehensive-guide-to-pipex
- Video simulating pipe in C: https://www.youtube.com/watch?v=6xbLgZpOBi8
- Video redirecting standerd output: https://www.youtube.com/watch?v=5fnVr-zH-SE
- [done] Chapter 1: https://medium.com/@lannur-s/pipex-42-chapter-1-metamorphosis-execve-1a4710ab8cb1
- [done] Chapter 2: https://medium.com/@lannur-s/what-is-a-fork-e0b74e4bb821
- [done] Chapter 3: https://medium.com/@lannur-s/pipex-42-chapter-3-mastering-execve-using-fork-f93906a79d7c
- Chapter 4: https://medium.com/@lannur-s/pipex-42-chapter-4-pipe-5b4afa4a37b7
- Little overview (contains bonus part): https://gitlab.com/madebypixel02/pipex
- Short explanation [really good]: https://techy.asia/posts/how-to-solve-pipex/
- Video list: https://www.youtube.com/watch?v=Vax97MIL_uI&list=PLKUb7MEve0TjHQSKUWChAWyJPCpYMRovO&index=57


CODING PROCESS:
1. Validate the input
2. Obtain path for the commands, look for PATH varaible, check for errors
3. Iterrate throug the list of commands (so only two, more for bonus)
2. Create a child process, everz child runts the command
3. The pipe sends the output to the partner process. The parent waits for the child process to finish.
4. Parent then redirects the rading end of the pipe back to the stin for th next command, closing unused file discriptors.

The outfile needs to be opened with different permission depending on whether or not here_doc was used.
Special edge cases: /dev/urandom and /dev/stdin

POTENTIAL ISSUES:
- leaving one file open longer than usual can really break things

NEW FUNCTIONS: dup, dup2, execve, fork, pipe, unlink, wait, waitpid, access

int dup(int oldfd); // returns a newfd which is the lowest-numbered unused file descriptor for the new descriptor
int dup2(int oldfd, int newfd); // returns a newfd which in the 2nd param. Closes newfd if needed, then duplicates oldfd into newfd

int execve(const char *pathname, char *const argv[], char *const envp[]);
const char *pathname = program
char *const argv[] = ponters to strings passes to the new program
char *const envp[] = strings passed as the environment of the new program

pid_t fork(void);
Splits process creating a child process with pid 0
fork() creates a new process by duplicating the calling process. The new process is referred to as
the child process. The calling process is referred to as the parent process.
On success, the PID of the child process is returned in the parent, and 0 is returned in the child.
On failure, -1 is returned in the parent, no child process is created, and errno is  set  appropriately.
Also: fork() splits the process in two parallel, simultaneous processes, that happen at the same time.

int pipe(int pipefd[2])
pipefd[0] refers to the read end of the pipe.  pipefd[1] refers to the write end of the pipe. 
On  success,  zero  is  returned.   On error, -1 is returned, errno is set appropriately, and
pipefd is left unchanged.

unlink - call the uhttps://github.com/tolmvad/pipex/tree/masternlink function to remove the specified fil

pid_t wait(int *wstatus);
pid_t waitpid(pid_t pid, int *wstatus, int options);
The wait() system call suspends execution of the calling thread until one of its children terminates.  The  call  wait(&wsta‐
tus) is equivalent to:
waitpid(-1, &wstatus, 0);
The waitpid() system call suspends execution of the calling thread until a child specified by pid argument has changed state.

EXAMPLES OF IMPLEMENTATIONS:
https://github.com/tolmvad/pipex/tree/master


TEST:
https://techy.asia/posts/how-to-solve-pipex/

MOST COMMON MISTAKES WITH PIPEX:
1. Infile is not readable or doesn't exit -> Pipex should just skip the first command, but it NEEDS
to execute the 2nd command.
2. Outfile is not writable -> Pipex should just skip the last command, but it NEEDS
to execute all the previous commands.
3. Handle for when envp does not contain PATH for the fisrt command but it doesn for the second
srudman@GWTC71427:~/mami_pokazat/pipex$ env -i PATH= < pipex_notes.txt sleep 5 | ls > test_file
env: ‘sleep’: No such file or directory
srudman@GWTC71427:~/mami_pokazat/pipex$ env -i PATH= < pipex_notes.txt ls | sleep > test_file
sleep: env: missing operand‘ls’
Try 'sleep --help' for more information.
: No such file or directory
The second one should still execute
4. All children have to execute at the same time.
5. Unforntunally the program crashed with a empty command those are the cases that should work: valgrind --track-fds=yes ./pipex "Makefile" "" "cat" /dev/stdout // empty command valgrind --track-fds=yes env -i ./pipex "Makefile" "ls" "cat" /dev/stdout // env is null valgrind --track-fds=yes env -i ./pipex "Makefile" "ls" "cat" /dev/stdout // env is null ./pipex /dev/random "ls" "$ls" outfile ./pipex /dev/random "ls" "/bin/ls" outfile // WHEN THE COMMAND HAS A PATH INSIDE IT SHOULD WORK UNLESS ITS NOT A EXEC valgrind --track-fds=yes ./pipex "/dev/random" "cat" "head" /dev/stdout // dev random is unlimited file must be cutted after 10 lines of the file. Nice attempt, and good luck next time!
6. check that you always have exactly 3 fds open (stdin, stderr, stdout).
7. Check what happens with children (valgrind flag to monitor children) - all fds should be closed, no memory allocation.
8. if you do here_doc - remember to check CTRL-D in the middle of line.